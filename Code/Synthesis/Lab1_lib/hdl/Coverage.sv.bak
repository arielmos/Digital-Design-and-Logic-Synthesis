//
// Verilog Module Lab1_lib.Coverage
//
// Created:
//          by - amitnag.UNKNOWN (SHOHAM)
//          at - 13:51:46 12/ 5/2020
//
// using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
//

`resetall
`timescale 1ns/10ps
module Coverage#(
  parameter Amba_Addr_Depth = 10,  //Part of the Amba standard at Moodle site; Range - 20,24,32
   parameter Amba_Word       = 16,  //Part of the Amba standard at Moodle site; Range - 16,24,32
   parameter Data_Depth      = 8)
( 
   // Port Declarations
   Interface.Checker_Coverager coverage_bus
);
//modport Checker_Coverager (input clk, rst, PADDR, PENABLE, PSEL, PWRITE,Image_Done,Pixel_Data,new_pixel);
// Coverage Group
covergroup regular_test @ (posedge coverage_bus.clk);
				// checking if the reset signal went to all the ranges
				 reset : coverpoint coverage_bus.rst{
         bins low = {0};
         bins high = {1};
          }          
          // checking if the result PENABLE went to all the ranges
         PENABLE : coverpoint coverage_bus.PENABLE{
         bins low = {0};
         bins high = {1};
          }
          // checking if the result PSEL went to all the ranges
         PSEL : coverpoint coverage_bus.PSEL{
         bins low = {0};
         bins high = {1};
          }
          // checking if the result PWRITE went to all the ranges
         PWRITE : coverpoint coverage_bus.PWRITE{
         bins low = {0};
         bins high = {1};
          }
          // checking if the result Image_Done went to all the ranges
         Image_Done : coverpoint coverage_bus.Image_Done{
         bins low = {0};
         bins high = {1};
          }
        // checking if the result Pixel_Data went to all the ranges
         Pixel_Data : coverpoint coverage_bus.Pixel_Data{
         bins low = {[0:255]};
          }
           // checking if the ADDRESS went to all the ranges
         ADDRESS : coverpoint coverage_bus.PADDR{
         bins parameters = {[0:9]};         
         bins images = {[10:2**(Amba_Addr_Depth-1)]};
          }
          
          // checking if the PWDATA went to all the ranges
         PWDATA : coverpoint coverage_bus.PWDATA{
            bins low ={[0:Amba_Word-1]};
          }
          // checking if the new_pixel went to all the ranges
         new_pixel : coverpoint coverage_bus.new_pixel{
         bins low = {0};
         bins high = {1};
          }       
				endgroup 

// regular and extreme case checking for M size 
covergroup Msize_test @ (posedge coverage_bus.clk iff (coverage_bus.PADDR==4));
				// checking if the reset signal went to all the ranges
				 Msize : coverpoint coverage_bus.PWDATA{
          // Block size is between 1 and Np/10, max Np is 720
         bins MsizeLow = {[1:10]};
         bins MsizeMid = {[11:49]};
         bins MsizeHigh = {[50:72]};

          }
endgroup


//checks the extreme cases of picture sizes:
//very small: 200-300
//very large: 620-720
covergroup picture_size_test @ (posedge coverage_bus.clk iff (coverage_bus.PADDR==2));
				// checking if the reset signal went to all the ranges
				 Nsize : coverpoint coverage_bus.PWDATA{
         bins vsmall = {[200:300]};
         bins regular = {[0:619]};
         bins vlarge = {[620:720]};
          }
endgroup

//checks the regular and extreme cases of pixel sizes:
covergroup pixel_value_test @ (posedge coverage_bus.clk iff (coverage_bus.PADDR>9));
				// checking if the reset signal went to all the ranges
				 pixel : coverpoint coverage_bus.PWDATA{
         bins plow = {[0:40]};
         bins pmid = {[41:214]};
         bins phigh = {[215:255]};
          }
endgroup

// Instance of covergroup regular_test
regular_test regular_tst = new();
pixel_value_test size_tst = new();
Msize_test Msize_tst = new();
pixel_value_test pval_tst = new();
endmodule
